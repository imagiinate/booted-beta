/*
Theme created for use with Sequence.js (http://www.sequencejs.com/)

Theme: Theme Template
Version: 1.2
Theme Author: Ian Lunn @IanLunn
Author URL: http://www.ianlunn.co.uk/
Theme URL: http://www.sequencejs.com/developers/theme-template/

This is a FREE theme and is available under a MIT License:
http://www.opensource.org/licenses/mit-license.php

Sequence.js and its dependencies are (c) Ian Lunn Design 2012 - 2013 unless otherwise stated.
*/

//Selector Variables
$sequenceContainer: "#sequence"; //the container for Sequence
$sequenceCanvas: ".sequence-canvas"; //the element that contains Sequence's frames
$animateIn: ".animate-in"; //the animate-in class (can be changed in future versions of Sequence)
$animateOut: ".animate-out"; //the animate-out class (can be changed in future versions of Sequence)
$nextButton: ".sequence-next"; //next frame button
$prevButton: ".sequence-prev"; //previous frame button
$pauseButton: ".sequence-pause"; //pause button
$pagination: ".sequence-pagination"; //the element used for pagination
$whenPaused: ".sequence-paused"; //pause indicator
$sequencePreloader: ".sequence-preloader"; //the preloader element

@import "partials/reset"; //import Eric Meyer's CSS Reset. Remove this if you have a reset in your main stylesheet
@import "partials/mixins"; //vendor prefixing mixins

/* THEME STYLES */

/* when in fallback mode (for browsers that don't support transitions) hide anything outside of the Sequence container */
#{$sequenceContainer}.sequence-fallback {
    overflow: hidden;
}
	
#{$sequenceContainer} { /* the Sequence container */
	position: relative; /* required - makes the position of animated elements relative to the Sequence element */
	height: 100%; 
	width: 100%;
	max-width: 960px;
	margin: 0 auto; /* centers Sequence */
	border: black solid 1px;
	width: 100%;
	height: 600px; /* required (value can be changed) */

	> #{$sequenceCanvas} { /* required - make the Sequence canvas the same height and width as the container */
		height: 100%; 
		width: 100%;
	}

	> #{$sequenceCanvas} > li { /* each Sequence frame */
		position: absolute; /* required - allows Sequence to change the z-index of frames, so the active frame is always on top */
		width: 100%; /* required - makes the frame the same width as the container */
		height: 100%; /* required - makes the frame the same height as the container */
		z-index: 1; /* required - allows Sequence to change the z-index of frames, so the active frame is always on top */
	}

	> #{$sequenceCanvas} li > * { /* each top level element to be animated */
		position: absolute; /* required - make each animated element within a Sequence frame position absolute so their left/right/top/bottom can be manipulated */
	}
	
	.example-animation { /* starting position and base styles of the example animation */
		height: 100px;
		width: 100px;
		background: blue;
		color: white;
		left: -100px;
		top: 10px;
	}

	#{$animateIn} .example-animation { /* animate-in position of the example animation */
		left: 50%;
		top: 100px;
		@include prefixed(transform, rotate(360deg)); /* when this element animates in, make it rotate once */
		@include prefixed(transition-duration, 1s); /* make the element move and rotate over a 1 second period */
	}

	#{$animateOut} .example-animation { /* animate-out of the example animation */
		left: 100%;
		@include prefixed(transform, rotate(360deg)); /* when this element animates out, it won't rotate because it maintains the same rotating as the .animate-in class */
		@include prefixed(transition-duration, 1s); /* make the element move and rotate over a 1 second period */
	}
}